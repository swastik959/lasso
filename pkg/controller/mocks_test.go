// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/lasso/pkg/controller (interfaces: SharedController)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -package controller -destination ./mocks_test.go github.com/rancher/lasso/pkg/controller SharedController
//

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	reflect "reflect"
	time "time"

	client "github.com/rancher/lasso/pkg/client"
	gomock "go.uber.org/mock/gomock"
	cache "k8s.io/client-go/tools/cache"
)

// MockSharedController is a mock of SharedController interface.
type MockSharedController struct {
	ctrl     *gomock.Controller
	recorder *MockSharedControllerMockRecorder
	isgomock struct{}
}

// MockSharedControllerMockRecorder is the mock recorder for MockSharedController.
type MockSharedControllerMockRecorder struct {
	mock *MockSharedController
}

// NewMockSharedController creates a new mock instance.
func NewMockSharedController(ctrl *gomock.Controller) *MockSharedController {
	mock := &MockSharedController{ctrl: ctrl}
	mock.recorder = &MockSharedControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharedController) EXPECT() *MockSharedControllerMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockSharedController) Client() *client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*client.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockSharedControllerMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockSharedController)(nil).Client))
}

// Enqueue mocks base method.
func (m *MockSharedController) Enqueue(namespace, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Enqueue", namespace, name)
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockSharedControllerMockRecorder) Enqueue(namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockSharedController)(nil).Enqueue), namespace, name)
}

// EnqueueAfter mocks base method.
func (m *MockSharedController) EnqueueAfter(namespace, name string, delay time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnqueueAfter", namespace, name, delay)
}

// EnqueueAfter indicates an expected call of EnqueueAfter.
func (mr *MockSharedControllerMockRecorder) EnqueueAfter(namespace, name, delay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueAfter", reflect.TypeOf((*MockSharedController)(nil).EnqueueAfter), namespace, name, delay)
}

// EnqueueKey mocks base method.
func (m *MockSharedController) EnqueueKey(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnqueueKey", key)
}

// EnqueueKey indicates an expected call of EnqueueKey.
func (mr *MockSharedControllerMockRecorder) EnqueueKey(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueKey", reflect.TypeOf((*MockSharedController)(nil).EnqueueKey), key)
}

// Informer mocks base method.
func (m *MockSharedController) Informer() cache.SharedIndexInformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Informer")
	ret0, _ := ret[0].(cache.SharedIndexInformer)
	return ret0
}

// Informer indicates an expected call of Informer.
func (mr *MockSharedControllerMockRecorder) Informer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Informer", reflect.TypeOf((*MockSharedController)(nil).Informer))
}

// RegisterHandler mocks base method.
func (m *MockSharedController) RegisterHandler(ctx context.Context, name string, handler SharedControllerHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterHandler", ctx, name, handler)
}

// RegisterHandler indicates an expected call of RegisterHandler.
func (mr *MockSharedControllerMockRecorder) RegisterHandler(ctx, name, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockSharedController)(nil).RegisterHandler), ctx, name, handler)
}

// Start mocks base method.
func (m *MockSharedController) Start(ctx context.Context, workers int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, workers)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSharedControllerMockRecorder) Start(ctx, workers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSharedController)(nil).Start), ctx, workers)
}
